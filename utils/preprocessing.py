import re

def clean(text):
    return unicode(''.join([i if ord(i) < 128 else ' ' for i in text]))

def preprocess_text(text):
        text = " " + text.lower() + " "
        text = re.sub(r"(?::|;|=)(?:-)?(?:\)|\(|D|P)", " ", text)

        # Clean the text
        text = re.sub(r"(https|http)?:\/\/(\w|\.|\/|\?|\=|\&|\%|\-)*", " urllink ", text)
        text = re.sub(r"[^A-Za-z0-9^,!.?\/'+-=]", " ", text)
        
        text = re.sub(r'(.)\1+', r'\1\1', text)
        text = re.sub(r"what's", " what is ", text)
        text = re.sub(r" it's", " it is ", text)
        text = re.sub(r" its ", " it is ", text)
        text = re.sub(r" it s[\W|\d]", " it is ", text)
        text = re.sub(r" iv ", " i have ", text)
        text = re.sub(r" i ve ", " i have ", text)
        text = re.sub(r" onc ", " oncologist ", text)
        text = re.sub(r" cant[\W|\d]", " can not ", text)
        text = re.sub(r" can t[\W|\d]", " can not ", text)
        text = re.sub(r" isnt[\W|\d]", " can not ", text)
        text = re.sub(r" isn t[\W|\d]", " is not ", text)
        text = re.sub(r" aren t[\W|\d]", " are not ", text)
        text = re.sub(r" arent[\W|\d]", " are not ", text)
        text = re.sub(r" won t[\W|\d]", " will not ", text)
        text = re.sub(r" wont[\W|\d]", " will not ", text)
        text = re.sub(r" wouldn t[\W|\d]", " would not ", text)
        text = re.sub(r" wouldnt[\W|\d]", " would not ", text)
        text = re.sub(r" don t[\W|\d]", " do not ", text)
        text = re.sub(r" dont[\W|\d]", " do not ", text)
        text = re.sub(r" chemo[\W|\d]", " chemotherapy ", text)
        text = re.sub(r" chemos[\W|\d]", " chemotherapy ", text)
        text = re.sub(r" radio[\W|\d]", " radiotherapy ", text)
        text = re.sub(r" bc[\W|\d]", " breast cancer ", text)
        text = re.sub(r" him/her", " him or her ", text)
        

        text = re.sub(r" gp[\W|\d]", " doctor ", text)
        text = re.sub(r" its[\W|\d]", " it is ", text)
        text = re.sub(r" cap[\W|\d]", " capecitabine ", text)
        text = re.sub(r" rads[\W|\d]", " radiotherapy ", text)
        text = re.sub(r" doc[\W|\d]", " doctor ", text)
        text = re.sub(r" pac[\W|\d]", " paclitaxel ", text)
        text = re.sub(r" nw[\W|\d]", " side effects ", text)
        text = re.sub(r" ptx[\W|\d]", " paclitaxel ", text)
        text = re.sub(r" ht[\W|\d]", " hormone therapy ", text)
        text = re.sub(r" meds[\W|\d]", " medications ", text)
        text = re.sub(r" med[\W|\d]", " medications ", text)
        text = re.sub(r" mets[\W|\d]", " metastasis ", text)
        text = re.sub(r" dx[\W|\d]", " diagnose ", text)
        text = re.sub(r" dcis[\W|\d]", " ductal carcinoma in situ ", text)
        text = re.sub(r" ct scan[\W|\d]", " computed tomography scan ", text)
        text = re.sub(r" ct scans[\W|\d]", " computed tomography scan ", text)
        text = re.sub(r" ctscan[\W|\d]", " computed tomography scan ", text)
        text = re.sub(r" tnf[\W|\d]", " tumor necrosis factor ", text)
        text = re.sub(r" tn[\W|\d]", " tumor necrosis ", text)
        text = re.sub(r" se[\W|\d]", " side_effects ", text)
        text = re.sub(r" side effects[\W|\d]", " side_effects ", text)
        text = re.sub(r" side[\W|\d]effects[\W|\d]", " side_effects ", text)
        text = re.sub(r" side[\W|\d]effect[\W|\d]", " side_effects ", text)
        text = re.sub(r" tnf[\W|\d]", " tumor necrosis factor ", text)
        text = re.sub(r"[\W|\d]mg[\W|\d]", " ", text)    
        
        text = re.sub(r"\'s", " ", text)
        text = re.sub(r"\'ve", " have ", text)
        text = re.sub(r"can't", "can not", text)
        text = re.sub(r" cant ", " can not ", text)
        text = re.sub(r" dont ", " do not ", text)
        text = re.sub(r"won't", "will not", text)
        text = re.sub(r"n't", " not ", text)
        text = re.sub(r"i'm", "i am ", text)
        text = re.sub(r"\'re", " are ", text)
        text = re.sub(r"\'d", " would ", text)
        text = re.sub(r"\'ll", " will ", text)
        text = re.sub(r"\.{2,}", " . ", text)
        text = re.sub(r"\,{2,}", " , ", text)
        text = re.sub(r"\?{2,}", " ? ", text)
        text = re.sub(r"\!{2,}", " ! ", text)
        
        text = re.sub(r"[\d]+", " _num_ ", text)  # because spacy identifies numbers itself

        
        # taking care of special characters that end the line and commas
        text = re.sub(r"\.", " . ", text)
        text = re.sub(r"\,", " , ", text)
        text = re.sub(r"\!", " ! ", text)
        text = re.sub(r"\?", " ? ", text)
#         print(text)
        text = re.sub(r"\s{2,}", " ", text)
#         print(text)

        text = re.sub(r"\s\.\s", ". ", text)
        text = re.sub(r"\s\,\s", ", ", text)
        text = re.sub(r"\s\!\s", "! ", text)
        text = re.sub(r"\s\?\s", "? ", text)
#         print(text)
        text = re.sub(r"\/", " ", text)
        text = re.sub(r"\^", " ^ ", text)
        #     text = re.sub(r"\+", " + ", text)
        text = re.sub(r"\-", " ", text)
        text = re.sub(r"\=", " = ", text)
        text = re.sub(r"'", " ", text)
        text = re.sub(r":", " : ", text)
        text = re.sub(r" e g ", " eg ", text)
        text = re.sub(r" b g ", " bg ", text)
        text = re.sub(r" u s ", " american ", text)
        text = re.sub(r"e - mail", "email", text)
        text = re.sub(r"e-mail", "email", text)
        #     text = re.sub(r"\W", " ", text)
        text = re.sub(r"\s{2,}", " ", text)

        return (''.join([i if ord(i) < 128 else ' ' for i in text]).strip())
